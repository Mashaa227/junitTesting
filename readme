‚öîÔ∏è Stub vs Mockito (Manual Stubbing vs Framework Mocking)
Feature	Stub (Manual)	Mockito (Framework)
Definition	Handwritten fake class or implementation	Dynamically created mock objects via Mockito
Control over behavior	You hardcode behavior manually	You define behavior using when(...).thenReturn(...)
Ease of use	Tedious for large/complex interfaces	Simple and expressive, even for complex behavior
Verification (was method called?)	‚ùå Not possible unless you add logging manually	‚úÖ Built-in via verify(mock).method()
Best for	Simple cases, clear logic, no extra dependency	Complex interactions, large APIs, verifying behavior
Dependency	None	Requires adding Mockito to your build tool (Maven/Gradle)
Performance	Fast and lightweight	Slightly heavier due to reflection

‚úÖ When to Use Stubs
You want minimal external dependencies (e.g., in an academic setting or constrained environment).

You‚Äôre writing tests for very simple interfaces.

You want 100% transparent behavior (since you wrote the stub class yourself).

For pure unit testing of logic, especially when interaction verification isn‚Äôt needed.

‚úÖ When to Use Mockito
Your class interacts with multiple collaborators (e.g., DAOs, services).

You need to verify interactions (e.g., was a method called exactly once?).

You want less boilerplate ‚Äî Mockito can reduce the effort of writing test doubles.

You're working in a team or in enterprise projects where mocking frameworks are the norm.

which one is best and why


ChatGPT said:
Great follow-up, Neha! Here's a clear answer to: Which is best ‚Äì Stub or Mockito?

üèÜ Best Choice: Depends on the Use Case
‚úÖ Use Mockito when:
Your class has multiple dependencies (e.g., services, repositories, APIs).

You need to verify interactions (e.g., whether a method was called, how many times).

You want to simulate exceptions or edge cases easily.

You‚Äôre working on enterprise-level applications or team projects.

You need cleaner and more readable test code.

üîç Why it‚Äôs better:
Mockito saves time, reduces boilerplate, and offers more control and flexibility in testing ‚Äî especially when you need to test behavior, not just results.

‚úÖ Use Stubs when:
You‚Äôre working on a simple application or module.

You don‚Äôt want to add an external dependency.

You want full control and visibility into what the stub does.

You are in a restricted or academic environment (e.g., coding tests, interviews).

üîç Why it‚Äôs better in this case:
Stubs are transparent, lightweight, and help reinforce your understanding of how testing works under the hood.

‚úÖ Summary Table
Scenario	                       Best Choice
Complex interaction logic	         Mockito
Need to verify method calls	         Mockito
Simple logic testing	               Stub
No external libraries allowed	       Stub
Large project with many classes	      Mockito

üéØ Final Verdict
Use Mockito for most real-world, scalable, and maintainable projects.
Use Stubs for learning, interviews, and very simple cases.

‚úÖ Stub (Manual)
Definition: You manually write a fake class or interface implementation.

Control: Behavior is hardcoded inside the stub.

Ease of Use: Becomes tedious and verbose for large or complex interfaces.

Method Call Verification: ‚ùå Not supported unless you manually track method calls.

Best Use Case: Small/simple tests where behavior is fixed and easy to implement.

External Dependency: No external libraries required.

Performance: Lightweight and fast.

Transparency: Fully visible and controlled logic, since it's handwritten.

Example: Stub is often used in unit tests to verify the behavior of a class or interface.

============================================================STUBS======================================================================================================================
package com.vwits.junit_testing;

import com.vwits.junit_testing.business.SomeBusinessImpl;
import com.vwits.junit_testing.data.SomeDataService;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.assertEquals;

//using stub implementation
class SomeDataServiceStub implements SomeDataService {
    @Override
    public int[] retrieveAllData() {
        return new int[]{1,2,3};
    }
}

class SomeDataServiceEmptyStub implements SomeDataService {
    @Override
    public int[] retrieveAllData() {
        return new int[]{};
    }
}

class SomeDataServiceOneElementStub implements SomeDataService {
    @Override
    public int[] retrieveAllData() {
        return new int[]{5};
    }
}

 class SomeBusinessStudTest {

    @Test
     void calculateSumUsingDataService() {

        SomeBusinessImpl business = new SomeBusinessImpl();
        business.setSomeDataService(new SomeDataServiceStub());
        int actualResult = business.calculateSumUsingDataService();
        int expectedResult = 6;
        assertEquals(expectedResult,actualResult);

    }

     @Test
     void calculateSumUsingDataServiceEmpty() {

         SomeBusinessImpl business = new SomeBusinessImpl();
         business.setSomeDataService(new SomeDataServiceOneElementStub());
         int actualResult = business.calculateSumUsingDataService();
         int expectedResult = 5;
         assertEquals(expectedResult,actualResult);

     }

     @Test
     void calculateSumUsingDataServiceOneElement() {

         SomeBusinessImpl business = new SomeBusinessImpl();
         business.setSomeDataService(new SomeDataServiceEmptyStub());
         int actualResult = business.calculateSumUsingDataService();
         int expectedResult = 0;
         assertEquals(expectedResult,actualResult);

     }
}
================================================================================================================

‚úÖ Mockito (Framework Mocking)
Definition: Automatically creates mock objects at runtime using a mocking framework.

Control: Behavior is set using methods like when(...).thenReturn(...).

Ease of Use: Easy to use, even with complex dependencies.

Method Call Verification: ‚úÖ Built-in support with verify(...).

Best Use Case: Complex services, layered apps, and interaction-based testing.

External Dependency: Requires adding Mockito to your project via Maven/Gradle.

Performance: Slightly heavier due to runtime object generation.

Flexibility: Very flexible, ideal for verifying and simulating dynamic behavior.

Transparency: Easy to see and control the behavior of the mock objects.

Example: Mockito is often used in integration tests to verify interactions between services.
================================================================================================================
================================================================================================================
                                          JUNIT 5
----------------------------------------------------------------------------------------------------------------
üîπ 1. @RunWith(MockitoJUnitRunner.class) ‚Äì JUnit 4
‚úÖ What it does:
Tells JUnit to run your test class using Mockito‚Äôs special test runner, which initializes mocks (@Mock, @InjectMocks, etc.) before each test method.

Without this, you'd have to manually initialize mocks using MockitoAnnotations.initMocks(this);.

‚úÖ When you use it:
When you're writing tests using JUnit 4, you need @RunWith to plug in external test runners like Mockito‚Äôs.

‚ùå Limitation:
JUnit 4 allows only one runner. So if you're using another library like Spring (@RunWith(SpringRunner.class)), you can't use Mockito's runner too ‚Äî you‚Äôd need to initialize mocks manually.

üìå Example:
java
Copy
Edit
@RunWith(MockitoJUnitRunner.class)
public class OrderServiceTest {

    @Mock
    private OrderRepository orderRepository;

    @InjectMocks
    private OrderService orderService;

    @Test
    public void testCreateOrder() {
        // Your test logic
    }
}
üîπ 2. @ExtendWith(MockitoExtension.class) ‚Äì JUnit 5
‚úÖ What it does:
Registers Mockito‚Äôs JUnit 5 extension, which takes care of setting up mocks and injections automatically.

‚úÖ When you use it:
When your project uses JUnit 5 (Jupiter), which uses extensions instead of runners.

You can combine multiple extensions (e.g., Mockito, Spring, Parameterized tests, etc.) without conflicts.

üí° Why it‚Äôs better:
More flexible: Unlike JUnit 4, you can apply multiple extensions in JUnit 5.

Cleaner syntax, and works well with modern Java and frameworks like Spring Boot + JUnit 5.

üìå Example:
java
Copy
Edit
@ExtendWith(MockitoExtension.class)
public class OrderServiceTest {

    @Mock
    private OrderRepository orderRepository;

    @InjectMocks
    private OrderService orderService;

    @Test
    public void testCreateOrder() {
        // Your test logic
    }
}
üîÅ Summary Comparison Table:
Feature	@RunWith(MockitoJUnitRunner.class)	@ExtendWith(MockitoExtension.class)
JUnit Version	JUnit 4	JUnit 5
Mock setup	Automatic	Automatic
Allows multiple runners/extensions	‚ùå No	‚úÖ Yes
Manual mock init alternative	MockitoAnnotations.initMocks(this)	MockitoAnnotations.openMocks(this) (but not needed usually)
Preferred for modern code	‚ùå Deprecated	‚úÖ Recommended

üéØ Final Thoughts:
If you're still using JUnit 4, use @RunWith(MockitoJUnitRunner.class) (or move to JUnit 5 if possible).

If you're on JUnit 5, always prefer @ExtendWith(MockitoExtension.class) ‚Äî more flexibility, better integration, and cleaner design.

================================================================================================================

In Junit 5, we do not need to add @RunWith(SpringRunner.class) on the top of @MockMvcTest(controllers = OrderController.class)